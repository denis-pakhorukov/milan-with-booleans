#ifndef _MILAN_VM_H
#define _MILAN_VM_H

#include <stdio.h>

/* Константы */

/* Размер памяти команд */
#define MAX_PROGRAM_SIZE        65536

/* Размер памяти данных */
#define MAX_MEMORY_SIZE         65536

/* Размер стека */
#define MAX_STACK_SIZE          8192

/* Команды виртуальной машины */
typedef enum {
    NOP = 0,        /* Нет операции */
    STOP,           /* Остановка */
    LOAD,           /* Загрузка слова из памяти данных */
    STORE,          /* Запись слова в память данных */
    BLOAD,          /* Загрузка слова из памяти данных с учётом смещения */
    BSTORE,         /* Запись слова в память данныз с учётом смещения */
    PUSH,           /* Заталкивание слова в стек */
    POP,            /* Выталкивание слова из стека */
    DUP,            /* Дублирование слова на вершине стека */
    INVERT,         /* Изменение знака числа на вершине стека */
    ADD,            /* Сложение */
    SUB,            /* Вычитание */
    MULT,           /* Умножение */
    DIV,            /* Целочисленное деление */
    COMPARE,        /* Сравнение */
    JUMP,           /* Безусловный переход */
    JUMP_YES,       /* Условный переход, если на вершине стека не 0 */
    JUMP_NO,        /* Условный переход, если на вершине стека 0 */
    INPUT,          /* Чтение слова со стандартного устройства ввода */
    PRINT           /* Запись слова на стандартное устройство вывода */
} operation;

/* Операции сравнения */
typedef enum {
    EQ,             /* =  */
    NE,             /* !- */
    LT,             /* <  */
    GT,             /* >  */
    LE,             /* <= */
    GE              /* >= */
} compare_type;

/* Структура ячейки памяти команд */
typedef struct {
    operation operation; /* Код команды */
    int arg;         /* Аргумент */
} command;

/* Информация о команде */
typedef struct opcode_info {
    char *name;          /* Текстовое представление команды */
    int need_arg;        /* Признак, равный 1, если команде нужен аргумент */
} opcode_info;

/* Получение информации о команде с кодом op.
 * Освобождать память, на которую указывает возвращаемый
 * указатель, не нужно.
 */
opcode_info* operation_info(operation op);

/* Запись команды в память команд по адресу address. */
void put_command(unsigned int address, operation op, int arg);

/* Запуск программы.
 *
 * Исполнение программы начинается с адреса 0 и заканчивается,
 * когда встретится команда STOP или будет обнаружена ошибка
 * времени исполнения.
 */
void run();

/* Запись значения value в память данных по адресу address. */
void set_mem(unsigned int address, int value);

#endif
